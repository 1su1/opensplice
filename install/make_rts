#
# Setup variables
#
RTS=$OSPL_HOME/install/RTS
#
# Copy contents of specified directory 
#
install_dir ()
{
    source=$1
    target=$2
    dir=$3
    mode=$4

    if [ -d $source ]
    then
	mkdir -p $RTS/$target/$dir
	cp $source/* $RTS/$target/$dir
	chmod -R $mode $RTS/$target/$dir/* 2> /dev/null
    fi
}

#
# Copy specified file to the specified directory 
#
install_file ()
{
    source=$1
    target=$2
    dir=$3
    file=$4
    mode=$5

    if [ -d $source ]
    then
	mkdir -p $RTS/$target/$dir
	chmod 755 $RTS/$target/$dir 2> /dev/null
	if [ -f $source/$file ]
	then
	    printf "*       copy $file ... "
	    cp $source/$file $RTS/$target/$dir
	    chmod $mode $RTS/$target/$dir/$file 2> /dev/null
	    echo "Ready"
	else
	    echo "* ##    file $file not found"
	fi
	chmod 555 $RTS/$target/$dir 2> /dev/null
    fi
}

#
# Copy specified file to the specified directory
#
install_bin_file ()
{
    source=$1
    target=$2
    dir=$3
    file=$4
    mode=$5
    target_os=`expr "$target" : '[a-zA-Z0-9]*\.\([a-zA-Z]*\)'`

    if [ -d $source ]
    then
	mkdir -p $RTS/$target/$dir
	chmod 755 $RTS/$target/$dir 2> /dev/null
	if [ -f $source/$file ]
	then
	    printf "*       copy $file ... "
	    cp $source/$file $RTS/$target/$dir
	    chmod $mode $RTS/$target/$dir/$file 2> /dev/null
	    echo "Ready"
	else
	    echo "* ##    file $file not found"
	fi
	chmod 555 $RTS/$target/$dir 2> /dev/null
    fi
}

install_target ()
{
    target=$1
    target_os=`expr "$target" : '[a-zA-Z0-9]*\.\([a-zA-Z]*\)'`

    echo "*   Prepare RTS for target $target"

    mkdir $RTS/$target

    #
    # Copy default configuration file for SPLICE-DDS
    #
    printf "*     Copy splice-dds default configuration file "
    mkdir $RTS/$target/etc
    mkdir $RTS/$target/etc/config
    cp $OSPL_HOME/etc/ospl.xml $RTS/$target/etc/config
    chmod 444 $RTS/$target/etc/config/* 2> /dev/null
    chmod 555 $RTS/$target/etc/config 2> /dev/null
    echo "Ready"

    # done with etc dir
    chmod 555 $HDE/$target/etc 2> /dev/null

    #
    # Copy libray files
    #
    echo "*     Copy library files"
    release=`ls -d $OSPL_HOME/lib/$target-release 2>/dev/null`
    if [ -z "$release" ]
    then
        echo "* ##    -release target not found checking -$target_build"
        release=`ls -d $OSPL_HOME/lib/$target-$target_build 2>/dev/null`
    fi
    if [ -n "$release" ]
    then
        mkdir $RTS/$target/lib
        install_dir $release $target lib 744
	chmod 444 $RTS/$target/lib/*
        chmod 555 $RTS/$target/lib 2> /dev/null
    else
        echo "* ##    No library files detected"
    fi
    echo "*     Library files Ready"
    
    #
    # Copy java archive files
    #
    if [ "$target_os" != "vxworks" -a "$target_os" != "integrity5.0.9" ]
    then
        echo "*     Copy JAVA archive files"
        release=`ls -d $OSPL_HOME/jar/$target-release 2>/dev/null`
        if [ -z "$release" ]
        then
            echo "* ##    -release target not found checking -$target_build"
            release=`ls -d $OSPL_HOME/jar/$target-$target_build 2>/dev/null`
        fi
        if [ -n "$release" ]
        then
            mkdir -p $RTS/$target/jar
            install_dir $release $target jar 444
            chmod 555 $RTS/$target/jar 2> /dev/null
        else
            echo "* ##    No JAVA archive files detected"
        fi
        echo "*     JAVA archive Ready"
    fi

    #
    # Copy script files
    #
    if [ "$target_os" != "vxworks" -a "$target_os" != "integrity5.0.9" ]
    then
        echo "*     Copy script files"
        release=`ls -d $OSPL_HOME/bin 2>/dev/null`
        if [ -n "$release" ]
        then
            mkdir -p $RTS/$target/bin
            install_file $release $target bin ospltun 555
            chmod 555 $RTS/$target/bin 2> /dev/null
        else
            echo "* ##    No script files detected"
        fi
        echo "*     Script files Ready"
    fi

    #
    # Copy execuatble files
    #
    echo "*     Copy executable files"
    release=`ls -d $OSPL_HOME/exec/$target-release 2>/dev/null`
    if [ -z "$release" ]
    then
        echo "* ##    -release target not found checking -$target_build"
        release=`ls -d $OSPL_HOME/exec/$target-$target_build 2>/dev/null`
    fi
    if [ -n "$release" ]
    then
        mkdir -p $RTS/$target/bin
        chmod 755 $RTS/$target/bin 2> /dev/null
        mkdir -p $RTS/$target/exec
        install_bin_file $release $target exec spliced 555
	ln -s ../exec/spliced  $RTS/$target/bin
        install_bin_file $release $target exec networking 555
	ln -s ../exec/networking  $RTS/$target/bin
        install_bin_file $release $target exec durability 555
	ln -s ../exec/durability  $RTS/$target/bin
        install_bin_file $release $target exec mmstat 555
	ln -s ../exec/mmstat  $RTS/$target/bin
        install_bin_file $release $target exec shmdump 555
	ln -s ../exec/shmdump  $RTS/$target/bin
        install_bin_file $release $target exec ospl 555
	ln -s ../exec/sdds  $RTS/$target/bin
        install_bin_file $release $target exec cmsoap 555
	ln -s ../exec/cmsoap  $RTS/$target/bin
        if [ -f $release/dat ]
	then
            install_bin_file $release $target exec dat 555
            ln -s ../exec/dat $RTS/$target/bin
        fi
        chmod 555 $RTS/$target/exec 2> /dev/null
        chmod 555 $RTS/$target/bin 2> /dev/null
    else
        echo "* ##    No executable files detected"
    fi
    echo "*     executable files Ready"

    md5sum --help 2> /dev/null > /dev/null
    md5=$?
    if [ $md5 -eq 0 ]
    then
        echo "*     Computing MD5 checksums (take a break)"
      cwd=`pwd`
      cd $RTS/$target
      find . -type f -exec md5sum {} \; | tee /tmp/$$md5.sum
      cp /tmp/$$md5.sum $RTS/$target/md5.sum
      rm -f /tmp/$$md5.sum
      echo "*     Computing MD5 checksums Ready"
      cd $cwd
    else
      echo "* ##  Cannot compute MD5 checksums"
    fi

    printf "*     Prepare default release.com ... "
    RELF=$RTS/$target/release.com
    echo "echo \"<<< OpenSplice RTS Release <RELEASE> For $target Date <DATE> >>>\"" >> $RELF
    echo "OSPL_HOME=$RTS/$target" >> $RELF
    echo "OSPL_TARGET=$target" >> $RELF
    echo "PATH=\$OSPL_HOME/bin:\$PATH" >> $RELF
    echo "LD_LIBRARY_PATH=\$OSPL_HOME/lib:\$LD_LIBRARY_PATH" >> $RELF
    echo "OSPL_URI=file://\$OSPL_HOME/etc/config/ospl.xml" >> $RELF
    echo "export OSPL_HOME OSPL_TARGET PATH LD_LIBRARY_PATH OSPL_URI" >> $RELF
    chmod 555 $RELF 2> /dev/null
    echo "Ready"

    chmod 555 $RTS/$target 2> /dev/null

    printf "*     Prepare package ... "
    wd=`pwd`
    cd $RTS
    version=`grep "^PACKAGE_VERSION" $OSPL_HOME/release_info/RELEASE | sed -e "s/PACKAGE_VERSION=\"//" | sed -e "s/\"//"`
    tar cf OpenSpliceDDS${version}-${target}-RTS.tar $target
    cd $wd
    echo "Ready"

    echo "*   RTS prepared for target $target Ready"
}

echo "* Build SPLICE RTS"

target_list=`IFS="-"; set $SPLICE_TARGET; echo $1`
target_build=`IFS="-"; set $SPLICE_TARGET; echo $2`

#
# Prepare RTS master directory
#
printf "*   Prepare RTS master directory ... "
mkdir -p $RTS; echo "Ready"

for target in $target_list
do
    #
    # Remove old RTS first
    #
    if [ -d $RTS/$target ]
    then
        printf "*   Remove old RTS/$target directory ... "
        chmod -R 777 $RTS/$target 2> /dev/null
	rm -rf $RTS/OpenSpliceDDS*-${target}-RTS.tar
        rm -rf $RTS/$target; echo "Ready"
    fi
    install_target $target
done

echo "* SPLICE RTS Ready"

