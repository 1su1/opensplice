<?xml version="1.0" encoding='ISO-8859-1' standalone='no'?>
<!DOCTYPE Dlrl SYSTEM 'Dlrl.dtd'>
<!-- In our example we are using an existing topic model which contains
     topics for the ChatMessage object and User object. Because the DLRL
     itself can not determine how the object definition relates to the
     topic defintion we must provide a detailed mapping of the object onto
     the topic.
  -->
<Dlrl name='DLRL_SecureChatRoom_example'>

    <!-- we must always define a templateDef element for each multiRelation
         used within DLRL. As we need to specify the collection type (pattern)
         as well as the type of object inside the collection (itemType).
      -->
	<templateDef name="DLRLChat::UserSet" pattern="Set" itemType="DLRLChat::User"/>

    <!-- The complete mapping of the ChatMessage onto the already existing
         DCPS ChatMessage topic
     -->
	<classMapping name="DLRLChat::ChatMessage" implClass="WhiteListedMessageBoard::ChatMessageCustomImpl">
		<mainTopic name="Chat_ChatMessage" typename="Chat::ChatMessage">
			<keyDescription content="NoOid">
				<keyField>userID</keyField>
			</keyDescription>
		</mainTopic>
		<monoAttribute name="id">
			<valueField>userID</valueField>
		</monoAttribute>
		<monoAttribute name="index">
			<valueField>index</valueField>
		</monoAttribute>
		<monoAttribute name="message">
			<valueField>content</valueField>
		</monoAttribute>
        <!-- In our topic model the userID is a key field for the instance,
             but as in the DCPS example we can also use this field to relate
             to another topic, or in the case of DLRL, another object.
             Ussually we do not re-use a keyfield for a monoRelation, but use a
             non-key field of the topic for monoRelations, so we have an
             'out of the ordinary' use case here.
             As you may understand we can never change the keyfield of an object
             as it is used to identify that instance. So when we use a keyfield
             for a monoRelation we must realize that whenever we try to set
             the monoRelation we can only do so towards an object with the
             exact same key value, otherwise a PreconditionNotMet exception
             will be raised.
         -->
		<monoRelation name="sender">
			<keyDescription content="NoOid">
				<keyField>userID</keyField>
			</keyDescription>
		</monoRelation>
	</classMapping>

    <!-- The complete mapping of the User onto the already existing
         DCPS NameService topic
     -->
	<classMapping name="DLRLChat::User">
		<mainTopic name="Chat_NameService" typename="Chat::NameService">
			<keyDescription content="NoOid">
				<keyField>userID</keyField>
			</keyDescription>
		</mainTopic>
		<monoAttribute name="id">
			<valueField>userID</valueField>
		</monoAttribute>
		<monoAttribute name="name">
			<valueField>name</valueField>
		</monoAttribute>
        <!-- We are again using the keyfield of this object as the identifier
             for this relation, so the same rules apply as explained for the
             ChatMessage->sender monoRelation.
          -->
		<monoRelation name="lastMsg">
			<keyDescription content="NoOid">
				<keyField>userID</keyField>
			</keyDescription>
		</monoRelation>
	</classMapping>

    <classMapping name="DLRLChat::WhiteList">
		<mainTopic name="Chat_WhiteListTopic" typename="Chat::WhiteListTopic">
			<keyDescription content="NoOid">
				<keyField>name</keyField>
			</keyDescription>
		</mainTopic>
		<monoAttribute name="name">
			<valueField>name</valueField>
		</monoAttribute>
		<multiRelation name="friends">
			<multiPlaceTopic name="Chat_WhiteListUserSetTopic" typename="Chat::WhiteListUserSetTopic">
				<keyDescription content="NoOid">
					<keyField>name</keyField>
				</keyDescription>
			</multiPlaceTopic>
			<keyDescription content="NoOid">
				<keyField>userID</keyField>
			</keyDescription>
		</multiRelation>
    </classMapping>
</Dlrl>