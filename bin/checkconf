SPATH=`echo $PATH | tr ':' ' '`

pathcheck ()
{
    for i in $SPATH
    do 
        test -f $i/$1 && return 0
    done
    return 1
}

# test if gcc is at least v3.2
gcc_check ()
{
    echo -n "GCC: "
    pathcheck gcc
    if [ $? != 0 ]
    then
        echo "Error - Not found"
        return 1
    fi

    GCC_MAJOR=`gcc -dumpversion | cut -f 1 -d .`
    if [ $GCC_MAJOR -lt 3 ]
    then
        echo "Error - Only gcc 3.2 and above is supported"
        return 1
    fi

    GCC_MINOR=`gcc -dumpversion | cut -f 2 -d .`
    if [ $GCC_MAJOR -eq 3 -a $GCC_MINOR -lt 2 ]
    then
        echo "Error - Only gcc 3.2 and above is supported"
        return 1
    fi

    echo "OK - using version" `gcc -dumpversion`  
    return 0
}

# require GNU make 3.80 or 3.81
make_check ()
{
    echo -n "MAKE: "
    pathcheck make
    if [ $? != 0 ]
    then
        echo "Error - Not found"
        return 1
    fi

    MAKE_MAJOR=`make -v 2>/dev/null | head -1 | cut -f 2 -d . | cut -f 3 -d ' '`
    if [ $MAKE_MAJOR -lt 3 ]
    then
        echo "Error - Only make 3.80 and above is supported"
        return 1
    fi

    MAKE_MINOR=`make -v 2>/dev/null | head -1 | cut -f 2 -d .`
    if [ $MAKE_MAJOR -eq 3 -a $MAKE_MINOR -lt 80 ]
    then
        echo "Error - Only make 3.80 and above is supported"
        return 1
    fi

    echo "OK - using `make -v 2>/dev/null | head -1`"  
    return 0
}

# required Bison 2.x
bison_check ()
{
    echo -n "BISON: "
    pathcheck bison
    if [ $? != 0 ]
    then
        echo "Error - Not found"
        return 1
    fi
    BISON_VERSION=`bison -V 2>/dev/null | head -1`
    BISON_MAJOR=`echo $BISON_VERSION | cut -f 1 -d '.' | cut -f 4 -d ' '`
    if [ $BISON_MAJOR -lt 2 ]
    then
        echo "Error - Only bison 2.x and above is supported"
        return 1
    fi

    echo "OK - using $BISON_VERSION"  
    return 0
}

# required Flex 2.5.x
flex_check ()
{
    echo -n "FLEX: "
    pathcheck flex
    if [ $? != 0 ]
    then
        echo "Error - Not found"
        return 1
    fi

    FLEX_VERSION=`flex -V | cut -f 2 -d ' '`
    # some flex versions say "flex version x" rather than "flex x"
    if [ "$FLEX_VERSION" = "version" ]
    then
        FLEX_VERSION=`flex -V | cut -f 3 -d ' '`
    fi
    FLEX_MAJOR=`echo $FLEX_VERSION | cut -f 1 -d '.'`
    if [ $FLEX_MAJOR -lt 2 ]
    then
        echo "Error - Only flex 2.5.x and above is supported"
        return 1
    fi
    FLEX_MINOR=`echo $FLEX_VERSION | cut -f 2 -d '.'`
    if [ $FLEX_MAJOR -eq 2 -a $FLEX_MINOR -lt 5 ]
    then
        echo "Error - Only flex 2.5.x and above is supported"
        return 1
    fi

    echo "OK - using $FLEX_VERSION"  
    return 0
}

# require javac and check JAVA_HOME
javac_check ()
{
    echo -n "JAVAC: "
    REQUIRED_VERSION=1.5
    REQUIRED_VERSION=`echo $REQUIRED_VERSION | sed -e 's;\.;0;g'`
    
    # Check JAVA_HOME directory first
    if [ -n "$JAVA_HOME" ]
    then
	    T_JAVAC_EXE=$JAVA_HOME/bin/javac
        if [ ! -f $T_JAVAC_EXE ]
        then
            echo "Error - Not found"
            return 1
        fi
        JAVAC_EXE=`readlink -f $T_JAVAC_EXE`
    else
        # If not check the path for java
        pathcheck javac
        if [ $? != 0 ]
        then
            echo "Error - Not found"
            return 1
        fi
        T_JAVAC_EXE=`which javac`
        JAVAC_EXE=`readlink -f $T_JAVAC_EXE`
    fi
	
	$JAVAC_EXE -version 2> javac.ver
    REAL_VERSION=`cat javac.ver | grep "javac" | awk '{ print $2 }'`  
	JAVAC_VERSION=`echo $REAL_VERSION | awk -F'.' '{ print $1"."$2 }' | sed -e 's;\.;0;g'`
	rm javac.ver
    if [ -n "$JAVAC_VERSION" ]
	then
		if [ $JAVAC_VERSION -ge $REQUIRED_VERSION ]
		then
			JAVA_HOME=`echo $JAVAC_EXE | awk '{ print substr($1, 1, length($1)-9); }'`
	        export JAVA_HOME
		else
            echo "Error - Only JAVA 1.5 and above is supported"
            return 1
		fi
	else
        echo "Error - Only JAVA 1.5 and above is supported"
        return 1
	fi

    echo "OK - using JAVAC version $REAL_VERSION" 
    echo "  setting JAVA_HOME to $JAVA_HOME"  
    return 0
}

# require TAO and check TAO_ROOT
tao_check ()
{
    echo -n "TAO: "
    pathcheck tao_idl
    if [ $? != 0 ]
    then
        if [ -z "$TAO_ROOT" ]
        then 
            echo "Error - No TAO found" 
            return 1
        fi
        if [ ! -d "$TAO_ROOT" ]
        then
            echo "Error - $TAO_ROOT is not set to a directory"
            return 1
        fi
    else
        TAOIDL_EXE=`which tao_idl`
  		TAO_ROOT=`dirname \`dirname $TAOIDL_EXE\``
        export TAO_ROOT
    fi
    LD_LIBRARY_PATH=$TAO_ROOT/lib:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH
    PATH=$TAO_ROOT/bin:$PATH
    export PATH

    TAO_VERSION=`tao_idl -V 2>&1 | grep "PrismTech Version"`
    T_VAR="`echo $TAO_VERSION | grep \"PrismTech Version No: TAO 1.4.1\"`"
    if [ $? = 0 ]
    then
        SPLICE_ORB=DDS_OpenFusion_1_4_1 
    else
        T_VAR="`echo $TAO_VERSION | grep \"PrismTech Version No: TAO 1.5.1\"`"
        if [ $? = 0 ]
        then
            SPLICE_ORB=DDS_OpenFusion_1_5_1
        else
            echo "Error - Unrecognized TAO version - use Prismtech TAO 1.4.1 or 1.5.1"
            return 1
        fi
    fi
    export SPLICE_ORB

    echo "OK - using TAO $TAO_VERSION as SPLICE_ORB"
    echo "  setting TAO_ROOT to $TAO_ROOT"
    return 0
}

# eOrb required for Standalone api
eorb_check ()
{
    echo -n "EORB: "
    pathcheck idlcpp
    if [ $? != 0 ]
    then
        if [ -z "$EORBHOME" ]
        then 
            echo "Error - No eOrb found" 
            return 1
        fi
        if [ ! -d "$EORBHOME" ]
        then
            echo "Error - $EORBHOME is not set to a directory"
            return 1
        fi
    else
        IDLCPP_EXE=`which idlcpp`
  		EORB_BIN=`dirname \`dirname $IDLCPP_EXE\``
  		EORBHOME=`dirname $EORB_BIN`
        export EORBHOME
    fi
    
    if [ ! -d "$EORBHOME/src" ]
    then
        echo "Error - installed eOrb not a StandAlone version"
        return 1
    fi
    if [ -z "$EORBENV" ]
    then
        EORBENV=`ls $EORBHOME/bin/`
        if [ "`echo $EORBENV | wc -w`" != "1" ]
        then
            echo "Error - unable to set '$EORBENV'"
            return 1
        fi
        export EORBENV
    fi
    if [ ! -f "$EORBHOME/bin/$EORBENV/idlcpp" ]
    then
        echo "Error - unable to find $EORBHOME/bin/$EORBENV/idlcpp"
        return 1
    fi
    PATH=$EORBHOME/bin/$EORBENV:$PATH
    export PATH
    SPLICE_SA_ORB=DDS_Eorb_3_0_SA
    export SPLICE_SA_ORB

    EORB_VERSION=`idlcpp -version | awk '{ print $6 }'`
    echo "OK - using eOrb $EORB_VERSION as SPLICE_SA_ORB"
    echo "  setting EORBHOME to $EORBHOME"
    echo "  setting EORBENV to $EORBENV"
    return 0
}

# require gawk (no version checks)
gawk_check ()
{
    echo -n "GAWK: "
    pathcheck gawk
    if [ $? != 0 ]
    then
        echo "Error - Not found"
        return 1
    fi
    echo "OK"
    return 0
}

cleanup_checks ()
{
    unset gcc_check
    unset make_check
    unset bison_check
    unset flex_check
    unset javac_check
    unset tao_check
    unset eorb_check 
    unset gawk_check 
    unset GCC_MAJOR GCC_MINOR BISON_VERSION FLEX_VERSION REAL_VERSION
    unset MAKE_MAJOR MAKE_MINOR BISON_MAJOR FLEX_MAJOR FLEX_MINOR
    unset REQUIRED_VERSION JAVAC_EXE JAVAC_VERSION IDLCPP_EXE
    unset EORB_VERSION EORB_BIN T_JAVAC_EXE TAOIDL_EXE T_VAR SPATH
}

