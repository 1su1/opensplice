#if EORB_USE_EXPLICIT_TEMPLATES
template class EORBUVLSeq <$(scopedtypename), struct $(typename)Seq_uniq_>;
#endif

const char * $(scopedtypename)TypeSupportInterface::_local_id = "IDL:$(scope)/$(typename)TypeSupportInterface:1.0";

$(scopedtypename)TypeSupportInterface_ptr $(scopedtypename)TypeSupportInterface::_duplicate ($(scopedtypename)TypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean $(scopedtypename)TypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, $(scopedtypename)TypeSupportInterface::_local_id) == 0)
   {
      return TRUE;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return TRUE;
   }

   return FALSE;
}

$(scopedtypename)TypeSupportInterface_ptr $(scopedtypename)TypeSupportInterface::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   $(scopedtypename)TypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a ($(scopedtypename)TypeSupportInterface::_local_id EORB_ENV_VARN))
   {
      result = dynamic_cast<$(scopedtypename)TypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

$(scopedtypename)TypeSupportInterface_ptr $(scopedtypename)TypeSupportInterface::_unchecked_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   $(scopedtypename)TypeSupportInterface_ptr result;
   result = dynamic_cast<$(scopedtypename)TypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * $(scopedtypename)DataWriter::_local_id = "IDL:$(scope)/$(typename)DataWriter:1.0";

$(scopedtypename)DataWriter_ptr $(scopedtypename)DataWriter::_duplicate ($(scopedtypename)DataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean $(scopedtypename)DataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, $(scopedtypename)DataWriter::_local_id) == 0)
   {
      return TRUE;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return TRUE;
   }

   return FALSE;
}

$(scopedtypename)DataWriter_ptr $(scopedtypename)DataWriter::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   $(scopedtypename)DataWriter_ptr result = NULL;
   if (p && p->_is_a ($(scopedtypename)DataWriter::_local_id EORB_ENV_VARN))
   {
      result = dynamic_cast<$(scopedtypename)DataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

$(scopedtypename)DataWriter_ptr $(scopedtypename)DataWriter::_unchecked_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   $(scopedtypename)DataWriter_ptr result;
   result = dynamic_cast<$(scopedtypename)DataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * $(scopedtypename)DataReader::_local_id = "IDL:$(scope)/$(typename)DataReader:1.0";

$(scopedtypename)DataReader_ptr $(scopedtypename)DataReader::_duplicate ($(scopedtypename)DataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean $(scopedtypename)DataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, $(scopedtypename)DataReader::_local_id) == 0)
   {
      return TRUE;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return TRUE;
   }

   return FALSE;
}

$(scopedtypename)DataReader_ptr $(scopedtypename)DataReader::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   $(scopedtypename)DataReader_ptr result = NULL;
   if (p && p->_is_a ($(scopedtypename)DataReader::_local_id EORB_ENV_VARN))
   {
      result = dynamic_cast<$(scopedtypename)DataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

$(scopedtypename)DataReader_ptr $(scopedtypename)DataReader::_unchecked_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   $(scopedtypename)DataReader_ptr result;
   result = dynamic_cast<$(scopedtypename)DataReader_ptr> (p);
   result->m_count++;
   return result;
}



