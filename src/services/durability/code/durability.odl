
#include "v_kernel.odl"


/**
 * \file durability.odl
 * Defines the protocol messages for the durability service.
 *  
 */
module durabilityModule2 {
    typedef c_time   d_timestamp;
    typedef c_time   d_quality;
    typedef c_string d_name;
    typedef c_string d_partition;
    typedef c_string d_topic;
   
    struct d_networkAddress_s {
        c_ulong systemId;
        c_ulong localId;
        c_ulong lifecycleId;
    };
    
    enum d_serviceState {
        D_STATE_INIT,   
        D_STATE_DISCOVER_FELLOWS_GROUPS,  
        D_STATE_DISCOVER_LOCAL_GROUPS,
        D_STATE_DISCOVER_PERSISTENT_SOURCE, 
        D_STATE_INJECT_PERSISTENT,  
        D_STATE_FETCH_INITIAL,
        D_STATE_COMPLETE,
        D_STATE_FETCH,
        D_STATE_ALIGN,
        D_STATE_FETCH_ALIGN,
        D_STATE_TERMINATING,
        D_STATE_TERMINATED  
    };
   
    enum d_completeness {
        D_GROUP_KNOWLEDGE_UNDEFINED,
        D_GROUP_UNKNOWN,            
        D_GROUP_INCOMPLETE,         
        D_GROUP_COMPLETE            
    };
   
    enum d_durabilityKind {
        D_DURABILITY_VOLATILE,      
        D_DURABILITY_TRANSIENT_LOCAL,
        D_DURABILITY_TRANSIENT,      
        D_DURABILITY_PERSISTENT,     
        D_DURABILITY_ALL
    };
   
    enum d_alignmentKind {
        D_ALIGNEE_INITIAL_AND_ALIGNER, 
        D_ALIGNEE_INITIAL, 
        D_ALIGNEE_LAZY,
        D_ALIGNEE_ON_REQUEST
    };
   
    struct d_message_s {
        d_networkAddress_s addressee;           /* the destination         */
        d_networkAddress_s senderAddress;       /* the source              */
        d_serviceState     senderState;         /* the state of the source */
        d_timestamp        productionTimestamp; /* time at sender          */
        c_ulong            sequenceNumber;      /* count of messages per type per sender */
    };

    struct d_groupsRequest_s {
        d_message_s        parentMsg;
        d_partition        partition;
        d_topic            topic;
    };
   
    struct d_statusRequest_s {
        d_message_s        parentMsg;
    };
   
    struct d_status_s {
        d_message_s        parentMsg;
    };
   
    struct d_nameSpacesRequest_s{
        d_message_s        parentMsg;
    };
    
    struct d_nameSpaces_s{
        d_message_s        parentMsg;
        c_string           partitions;
        d_durabilityKind   durabilityKind;
        d_alignmentKind    alignmentKind;
        d_quality          initialQuality;
        c_ulong            total;
        d_networkAddress_s master;
    };
   
    struct d_sampleRequest_s {
        d_message_s        parentMsg;
        d_partition        partition;
        d_topic            topic;
        d_durabilityKind   durabilityKind;
        d_timestamp        requestTime;
        c_bool             withTimeRange;
        d_timestamp        beginTime;
        d_timestamp        endTime;
        d_networkAddress_s source;
        c_string           filter;
        sequence<c_string> filterParams;
        c_ulong            filterParamsCount;
        c_long             maxSamples;
        c_long             maxInstances;
        c_long             maxSamplesPerInstance;
    };
   
    struct d_newGroup_s {
        d_message_s       parentMsg;
        d_partition       partition;
        d_topic           topic;
        d_completeness    completeness;
        d_durabilityKind  durabilityKind;
        d_quality         quality;
        c_ulong           alignerCount;
    };
   
    struct d_sampleChainBead {
        sequence<c_octet> value;
        c_long            size;
    };
   
    struct d_sampleChainTrailer {
        c_ulong           nrSamples;
        d_completeness    completeness;
    };
   
    struct d_sampleChain_s {
        d_message_s                  parentMsg;
        c_string                     partition;
        c_string                     topic;
        d_durabilityKind             durabilityKind;
        sequence<d_networkAddress_s> addressees;
        c_ulong                      addresseesCount;
        d_networkAddress_s           source;
       
        union messageContent switch ( enum content { BEAD, LINK } )
        {
            case BEAD:
                d_sampleChainBead    bead;
            case LINK:
                d_sampleChainTrailer link;
        } msgBody;
    };
   
    struct d_deleteData_s {
        d_message_s        parentMsg;
        d_timestamp        actionTime;
        c_string           partitionExpr;
        c_string           topicExpr;
    };
};
