//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     OpenSplice Version:3.4.3.XXXX
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by idlpp, Version=4.0.123123.78.
// 
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using DDS;
using DDS.OpenSplice;

namespace Data
{
    #region DataTest
    [StructLayout(LayoutKind.Sequential)]
    public sealed class DataTest
    {
        public int TestId;
        public int ProviderId;
        // this was a property, but we can't pass a property by ref
        // strings are classes and thus default to null, so we set them to string.Empty.
        public string SensorType = string.Empty;
        public string DataType = string.Empty;
        public bool Emergency;
        public string TestStr = string.Empty;

		// TODO: we think we should default to null not empty list
		public List<int> SequenceTest;


        public DataTest()
        {
		}

        public DataTest(
            int testId,
            int providerId,
            string sensorType,
            string dataType,
            bool emergency,
            string testStr,
			List<int> sequenceTest)
        {
            TestId = testId;
            ProviderId = providerId;
            SensorType = sensorType;
            DataType = dataType;
            Emergency = emergency;
            TestStr = testStr;
			SequenceTest = sequenceTest;
        }
	}
    #endregion

    #region IDataTestDataReader
    public interface IDataTestDataReader : DDS.IDataReader
    {
        ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos);

        ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples);

        ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos);

        ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples);

        ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode ReadWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            IReadCondition readCondition);

        ReturnCode ReadWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            IReadCondition readCondition);

        ReturnCode TakeWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            IReadCondition readCondition);

        ReturnCode TakeWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            IReadCondition readCondition);

        ReturnCode ReadNextSample(
            DataTest dataValue,
            ref SampleInfo sampleInfo);

        ReturnCode TakeNextSample(
            ref DataTest dataValue,
            ref SampleInfo sampleInfo);

        ReturnCode ReadInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle);

        ReturnCode ReadInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle);

        ReturnCode ReadInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode TakeInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle);

        ReturnCode TakeInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle);

        ReturnCode TakeInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode ReadNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle);

        ReturnCode ReadNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle);

        ReturnCode ReadNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode TakeNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle);

        ReturnCode TakeNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle);

        ReturnCode TakeNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates);

        ReturnCode ReadNextInstanceWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle,
            IReadCondition readCondition);

        ReturnCode ReadNextInstanceWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle,
            IReadCondition readCondition);

        ReturnCode TakeNextInstanceWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle,
            IReadCondition readCondition);

        ReturnCode TakeNextInstanceWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle,
            IReadCondition readCondition);

        ReturnCode ReturnLoan(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos);

        ReturnCode GetKeyValue(
            DataTest key,
            InstanceHandle handle);

        InstanceHandle LookupInstance(
            DataTest instance);
    }
    #endregion

    #region DataTestDataReader
    public class DataTestDataReader : DDS.OpenSplice.DataReader, IDataTestDataReader
    {
        private DataTestTypeSupport typeSupport;

        public DataTestDataReader(DataTestTypeSupport ts, IntPtr gapiPtr)
            : base(gapiPtr)
        {
            typeSupport = ts;
        }

        public ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos)
        {
            return Read(ref dataValues, ref sampleInfos, Length.Unlimited);
        }

        public ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples)
        {
            return Read(ref dataValues, ref sampleInfos, maxSamples, SampleStateKind.Any,
                ViewStateKind.Any, InstanceStateKind.Any);
        }

        public ReturnCode Read(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates)
        {
            return Read(ref dataValues, ref sampleInfos, Length.Unlimited, sampleStates,
                viewStates, instanceStates);
        }

        public ReturnCode Read(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                SampleStateKind sampleStates,
                ViewStateKind viewStates,
                InstanceStateKind instanceStates)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.Read(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        sampleStates,
                        viewStates,
                        instanceStates);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos)
        {
            return Take(ref dataValues, ref sampleInfos, Length.Unlimited);
        }

        public ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples)
        {
            return Take(ref dataValues, ref sampleInfos, maxSamples, SampleStateKind.Any,
                ViewStateKind.Any, InstanceStateKind.Any);
        }

        public ReturnCode Take(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            SampleStateKind sampleStates,
            ViewStateKind viewStates,
            InstanceStateKind instanceStates)
        {
            return Take(ref dataValues, ref sampleInfos, Length.Unlimited, sampleStates,
                viewStates, instanceStates);
        }

        public ReturnCode Take(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                SampleStateKind sampleStates,
                ViewStateKind viewStates,
                InstanceStateKind instanceStates)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.Take(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        sampleStates,
                        viewStates,
                        instanceStates);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode ReadWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            IReadCondition readCondition)
        {
            return ReadWithCondition(ref dataValues, ref sampleInfos,
                Length.Unlimited, readCondition);
        }

        public ReturnCode ReadWithCondition(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                IReadCondition readCondition)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.ReadWithCondition(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        readCondition);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode TakeWithCondition(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            IReadCondition readCondition)
        {
            return TakeWithCondition(ref dataValues, ref sampleInfos,
                Length.Unlimited, readCondition);
        }

        public ReturnCode TakeWithCondition(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                IReadCondition readCondition)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.TakeWithCondition(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        readCondition);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode ReadNextSample(
                DataTest dataValue,
                ref SampleInfo sampleInfo)
        {
            object objectValues = dataValue;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.ReadNextSample(
                        this,
                        ref objectValues,
                        ref sampleInfo);
            dataValue = (Data.DataTest)objectValues;
            return result;
        }

        public ReturnCode TakeNextSample(
                ref DataTest dataValue,
                ref SampleInfo sampleInfo)
        {
            object objectValues = dataValue;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.TakeNextSample(
                        this,
                        ref objectValues,
                        ref sampleInfo);
            dataValue = (Data.DataTest)objectValues;
            return result;
        }

        public ReturnCode ReadInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle)
        {
            return ReadInstance(ref dataValues, ref sampleInfos, Length.Unlimited, instanceHandle);
        }

        public ReturnCode ReadInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle)
        {
            return ReadInstance(ref dataValues, ref sampleInfos, maxSamples, instanceHandle,
                SampleStateKind.Any, ViewStateKind.Any, InstanceStateKind.Any);
        }

        public ReturnCode ReadInstance(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                InstanceHandle instanceHandle,
                SampleStateKind sampleStates,
                ViewStateKind viewStates,
                InstanceStateKind instanceStates)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.ReadInstance(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        instanceHandle,
                        sampleStates,
                        viewStates,
                        instanceStates);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode TakeInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle)
        {
            return TakeInstance(ref dataValues, ref sampleInfos, Length.Unlimited, instanceHandle);
        }

        public ReturnCode TakeInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle)
        {
            return TakeInstance(ref dataValues, ref sampleInfos, maxSamples, instanceHandle,
                SampleStateKind.Any, ViewStateKind.Any, InstanceStateKind.Any);
        }

        public ReturnCode TakeInstance(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                InstanceHandle instanceHandle,
                SampleStateKind sampleStates,
                ViewStateKind viewStates,
                InstanceStateKind instanceStates)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.TakeInstance(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        instanceHandle,
                        sampleStates,
                        viewStates,
                        instanceStates);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode ReadNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle)
        {
            return ReadNextInstance(ref dataValues, ref sampleInfos, Length.Unlimited, instanceHandle);
        }

        public ReturnCode ReadNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle)
        {
            return ReadNextInstance(ref dataValues, ref sampleInfos, maxSamples, instanceHandle,
                SampleStateKind.Any, ViewStateKind.Any, InstanceStateKind.Any);
        }

        public ReturnCode ReadNextInstance(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                InstanceHandle instanceHandle,
                SampleStateKind sampleStates,
                ViewStateKind viewStates,
                InstanceStateKind instanceStates)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.ReadNextInstance(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        instanceHandle,
                        sampleStates,
                        viewStates,
                        instanceStates);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode TakeNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            InstanceHandle instanceHandle)
        {
            return TakeNextInstance(ref dataValues, ref sampleInfos, Length.Unlimited, instanceHandle);
        }

        public ReturnCode TakeNextInstance(
            ref DataTest[] dataValues,
            ref SampleInfo[] sampleInfos,
            int maxSamples,
            InstanceHandle instanceHandle)
        {
            return TakeNextInstance(ref dataValues, ref sampleInfos, maxSamples, instanceHandle,
                SampleStateKind.Any, ViewStateKind.Any, InstanceStateKind.Any);
        }

        public ReturnCode TakeNextInstance(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                InstanceHandle instanceHandle,
                SampleStateKind sampleStates,
                ViewStateKind viewStates,
                InstanceStateKind instanceStates)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.TakeNextInstance(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        instanceHandle,
                        sampleStates,
                        viewStates,
                        instanceStates);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode ReadNextInstanceWithCondition(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                InstanceHandle instanceHandle,
                IReadCondition readCondition)
        {
            return ReadNextInstanceWithCondition(
                ref dataValues,
                ref sampleInfos,
                Length.Unlimited,
                instanceHandle,
                readCondition);
        }

        public ReturnCode ReadNextInstanceWithCondition(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                InstanceHandle instanceHandle,
                IReadCondition readCondition)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.ReadNextInstanceWithCondition(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        instanceHandle,
                        readCondition);
            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode TakeNextInstanceWithCondition(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                InstanceHandle instanceHandle,
                IReadCondition readCondition)
        {
            return TakeNextInstanceWithCondition(
                ref dataValues,
                ref sampleInfos,
                Length.Unlimited,
                instanceHandle,
                readCondition);
        }

        public ReturnCode TakeNextInstanceWithCondition(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos,
                int maxSamples,
                InstanceHandle instanceHandle,
                IReadCondition readCondition)
        {
            object[] objectValues = dataValues;
            ReturnCode result =
                DDS.OpenSplice.FooDataReader.TakeNextInstanceWithCondition(
                        this,
                        ref objectValues,
                        ref sampleInfos,
                        maxSamples,
                        instanceHandle,
                        readCondition);

            dataValues = (Data.DataTest[])objectValues;
            return result;
        }

        public ReturnCode ReturnLoan(
                ref DataTest[] dataValues,
                ref SampleInfo[] sampleInfos)
        {
            ReturnCode result;

            if (dataValues != null && sampleInfos != null)
            {
                if (dataValues != null && sampleInfos != null)
                {
                    if (dataValues.Length == sampleInfos.Length)
                    {
                        dataValues = null;
                        sampleInfos = null;
                        result = ReturnCode.Ok;
                    }
                    else
                    {
                        result = ReturnCode.PreconditionNotMet;
                    }
                }
                else
                {
                    if ((dataValues == null) && (sampleInfos == null))
                    {
                        result = ReturnCode.Ok;
                    }
                    else
                    {
                        result = ReturnCode.PreconditionNotMet;
                    }
                }
            }
            else
            {
                result = ReturnCode.BadParameter;
            }

            return result;
        }

        public ReturnCode GetKeyValue(
                DataTest key,
                InstanceHandle handle)
        {
            return
                DDS.OpenSplice.FooDataReader.GetKeyValue(
                        this,
                        key,
                        handle);
        }

        public InstanceHandle LookupInstance(
                DataTest instance)
        {
            return
                DDS.OpenSplice.FooDataReader.LookupInstance(
                        this,
                        instance);
        }

    }

    #endregion

    #region IDataTestDataWriter
    public interface IDataTestDataWriter : DDS.IDataWriter
    {
        InstanceHandle RegisterInstance(
            DataTest instanceData);

        InstanceHandle RegisterInstanceWithTimestamp(
            DataTest instanceData,
            Time sourceTimestamp);

        ReturnCode UnregisterInstance(
            DataTest instanceData,
            InstanceHandle instanceHandle);

        ReturnCode UnregisterInstanceWithTimestamp(
            DataTest instanceData,
            InstanceHandle instanceHandle,
            Time sourceTimestamp);

        ReturnCode Write(DataTest instanceData);

        ReturnCode Write(
            DataTest instanceData,
            InstanceHandle instanceHandle);

        ReturnCode WriteWithTimestamp(
            DataTest instanceData,
            Time sourceTimestamp);

        ReturnCode WriteWithTimestamp(
            DataTest instanceData,
            InstanceHandle instanceHandle,
            Time sourceTimestamp);

        ReturnCode Dispose(
            DataTest instanceData,
            InstanceHandle instanceHandle);

        ReturnCode DisposeWithTimestamp(
            DataTest instanceData,
            InstanceHandle instanceHandle,
            Time sourceTimestamp);

        ReturnCode WriteDispose(
            DataTest instanceData);

        ReturnCode WriteDispose(
            DataTest instanceData,
            InstanceHandle instanceHandle);

        ReturnCode WriteDisposeWithTimestamp(
            DataTest instanceData,
            Time sourceTimestamp);

        ReturnCode WriteDisposeWithTimestamp(
            DataTest instanceData,
            InstanceHandle instanceHandle,
            Time sourceTimestamp);

        ReturnCode GetKeyValue(
            DataTest key,
            InstanceHandle instanceHandle);
    }
    #endregion

    #region DataTestDataWriter
    public class DataTestDataWriter : DDS.OpenSplice.DataWriter, IDataTestDataWriter
    {
        private DataTestTypeSupport typeSupport;

        public DataTestDataWriter(DataTestTypeSupport ts, IntPtr gapiPtr)
            : base(gapiPtr)
        {
            typeSupport = ts;
        }

        public InstanceHandle RegisterInstance(
                DataTest instanceData)
        {
            return DDS.OpenSplice.FooDataWriter.RegisterInstance(
                        this,
                        instanceData);
        }

        public InstanceHandle RegisterInstanceWithTimestamp(
                DataTest instanceData,
                Time sourceTimestamp)
        {
            return DDS.OpenSplice.FooDataWriter.RegisterInstanceWithTimestamp(
                        this,
                        instanceData,
                        sourceTimestamp);
        }

        public ReturnCode UnregisterInstance(
                DataTest instanceData,
                InstanceHandle instanceHandle)
        {
            return DDS.OpenSplice.FooDataWriter.UnregisterInstance(
                        this,
                        instanceData,
                        instanceHandle);
        }

        public ReturnCode UnregisterInstanceWithTimestamp(
                DataTest instanceData,
                InstanceHandle instanceHandle,
                Time sourceTimestamp)
        {
            return DDS.OpenSplice.FooDataWriter.UnregisterInstanceWithTimestamp(
                        this,
                        instanceData,
                        instanceHandle,
                        sourceTimestamp);
        }

        public ReturnCode Write(DataTest instanceData)
        {
            return Write(instanceData, InstanceHandle.Nil);
        }

        public ReturnCode Write(
                DataTest instanceData,
                InstanceHandle instanceHandle)
        {
            return DDS.OpenSplice.FooDataWriter.Write(
                        this,
                        instanceData,
                        instanceHandle);
        }

        public ReturnCode WriteWithTimestamp(
                DataTest instanceData,
                Time sourceTimestamp)
        {
            return WriteWithTimestamp(instanceData, InstanceHandle.Nil, sourceTimestamp);
        }

        public ReturnCode WriteWithTimestamp(
                DataTest instanceData,
                InstanceHandle instanceHandle,
                Time sourceTimestamp)
        {
            return DDS.OpenSplice.FooDataWriter.WriteWithTimestamp(
                        this,
                        instanceData,
                        instanceHandle,
                        sourceTimestamp);
        }

        public ReturnCode Dispose(
                DataTest instanceData,
                InstanceHandle instanceHandle)
        {
            return DDS.OpenSplice.FooDataWriter.Dispose(
                        this,
                        instanceData,
                        instanceHandle);
        }

        public ReturnCode DisposeWithTimestamp(
                DataTest instanceData,
                InstanceHandle instanceHandle,
                Time sourceTimestamp)
        {
            return DDS.OpenSplice.FooDataWriter.DisposeWithTimestamp(
                        this,
                        instanceData,
                        instanceHandle,
                        sourceTimestamp);
        }

        public ReturnCode WriteDispose(
                DataTest instanceData)
        {
            return WriteDispose(instanceData, InstanceHandle.Nil);
        }

        public ReturnCode WriteDispose(
                DataTest instanceData,
                InstanceHandle instanceHandle)
        {
            return DDS.OpenSplice.FooDataWriter.WriteDispose(
                        this,
                        instanceData,
                        instanceHandle);
        }

        public ReturnCode WriteDisposeWithTimestamp(
                DataTest instanceData,
                Time sourceTimestamp)
        {
            return WriteDisposeWithTimestamp(instanceData, InstanceHandle.Nil, sourceTimestamp);
        }

        public ReturnCode WriteDisposeWithTimestamp(
                DataTest instanceData,
                InstanceHandle instanceHandle,
                Time sourceTimestamp)
        {
            return DDS.OpenSplice.FooDataWriter.WriteDisposeWithTimestamp(
                        this,
                        instanceData,
                        instanceHandle,
                        sourceTimestamp);
        }

        public ReturnCode GetKeyValue(
                DataTest key,
                InstanceHandle instanceHandle)
        {
            ReturnCode result = DDS.OpenSplice.FooDataWriter.GetKeyValue(
                                    this,
                                    key,
                                    instanceHandle);
            return result;
        }
    }
    #endregion

    #region DataTestMarshaler
    public static class DataTestMarshaler
    {
        private static int[] offsetArray;
        private static bool initDone = false;

		private static IntPtr sequenceTestDataType;

        internal static void InitType(IntPtr participant)
        {
            offsetArray = TypeSupport.GetOffsets(participant, "Data::DataTest");
            initDone = true;
        }

        // with Write
        public static bool CopyIn(IntPtr basePtr, /*DataTest*/ IntPtr from, IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DataTest fromDataTest = tmpGCHandle.Target as DataTest;
            return CopyIn(basePtr, fromDataTest, to, 0);
        }

        public static bool CopyIn(IntPtr basePtr, DataTest from, IntPtr to, int offset)
        {
            if (!initDone) { /* Assert */}

            TypeSupport.Write(to, offset + offsetArray[0], from.TestId);
            TypeSupport.Write(to, offset + offsetArray[1], from.ProviderId);
            TypeSupport.Write(basePtr, to, offset + offsetArray[2], ref from.SensorType);
            TypeSupport.Write(basePtr, to, offset + offsetArray[3], ref from.DataType);
            TypeSupport.Write(to, offset + offsetArray[4], from.Emergency);
            TypeSupport.Write(basePtr, to, offset + offsetArray[5], ref from.TestStr);
			WriteSequenceTest(basePtr, to, offset + offsetArray[6], ref from.SequenceTest);

            // TODO: If we have an embedded structure within the data...
            //IntPtr detectionTo = new IntPtr(to.ToInt64() + offset_detection2);
            //DetectionTypeMarshaler.CopyIn(basePtr, from.Detection2, detectionTo);

			return true;
        }

        // with Read
        public static void CopyOut(IntPtr from, ref object to, int offset)
        {
            if (!initDone) { /* Assert */}

            DataTest detectionTo = (DataTest)to;
            if (detectionTo == null)
            {
                detectionTo = new DataTest();
            }

            detectionTo.TestId = TypeSupport.ReadInt32(from, offsetArray[0]);
            detectionTo.ProviderId = TypeSupport.ReadInt32(from, offsetArray[1]);
            detectionTo.SensorType = TypeSupport.ReadString(from, offsetArray[2]);
            detectionTo.DataType = TypeSupport.ReadString(from, offsetArray[3]);
            detectionTo.Emergency = TypeSupport.ReadBoolean(from, offsetArray[4]);
            detectionTo.TestStr = TypeSupport.ReadString(from, offsetArray[5]);
			detectionTo.SequenceTest = ReadSequenceTest(from, offsetArray[6]);

            to = detectionTo;
        }

		internal static void WriteSequenceTest(IntPtr basePtr, IntPtr to, int offset, ref List<int> sequenceTest)
		{
			if (sequenceTestDataType == IntPtr.Zero)
			{
				sequenceTestDataType = TypeSupport.GetArrayType(basePtr, "C_SEQUENCE<c_long>", "c_long", 0);
			}

			int size = sequenceTest == null ? 0 : sequenceTest.Count;
			if (size > 0)
			{
				IntPtr arrayPtr = TypeSupport.NewArray(sequenceTestDataType, size);
				for (int index = 0; index < size; index++)
				{
					// idlpp will generate the magic number "4" for this example
					TypeSupport.Write(arrayPtr, index * 4, sequenceTest[index]);
				}

				TypeSupport.Write(to, offset, arrayPtr);
			}
		}

		internal static List<int> ReadSequenceTest(IntPtr from, int offset)
		{
			List<int> sequenceTest = null;

			IntPtr arrayPtr = TypeSupport.ReadIntPtr(from, offset);
			int size = TypeSupport.ArraySize(arrayPtr);
			if (size > 0)
			{
				sequenceTest = new List<int>(size);
				for (int index = 0; index < size; index++)
				{
					// idlpp will generate the magic number "4" and correct 
					// TypeSupport.Read???? call for this example
					sequenceTest.Add(TypeSupport.ReadInt32(arrayPtr, index * 4));
				}
			}

			return sequenceTest;
		}
    }
    #endregion

    #region DataTestTypeSupport
    public class DataTestTypeSupport : DDS.OpenSplice.TypeSupport
    {
        private const string typeName = "Data::DataTest";
        private const string keyList = "TestId,ProviderId";
		private const string metaDescriptor = "<MetaData version=\"1.0.0\"><Module name=\"Data\"><Struct name=\"DataTest\"><Member name=\"TestId\"><Long/></Member><Member name=\"ProviderId\"><Long/></Member><Member name=\"SensorType\"><String/></Member><Member name=\"DataType\"><String/></Member><Member name=\"Emergency\"><Boolean/></Member><Member name=\"TestStr\"><String/></Member><Member name=\"SequenceTest\"><Sequence><Long/></Sequence></Member></Struct></Module></MetaData>";
		
        public DataTestTypeSupport()
            : base(typeName,
                    keyList,
                    metaDescriptor,
                    DataTestMarshaler.CopyIn,
                    DataTestMarshaler.CopyOut,
                    ReaderAlloc)
        { }

        public static object[] ReaderAlloc(int length)
        {
            return new DataTest[length];
        }

        public override DDS.OpenSplice.DataWriter CreateDataWriter(IntPtr gapiPtr)
        {
            return new DataTestDataWriter(this, gapiPtr);
        }

        public override DDS.OpenSplice.DataReader CreateDataReader(IntPtr gapiPtr)
        {
            return new DataTestDataReader(this, gapiPtr);
        }

        protected override void InitType(IntPtr participant)
        {
            DataTestMarshaler.InitType(participant);
            //BedrockSpotMarhaler.InitType(GetMetaPtr(participant, "Bedrock::Spot"));
        }
    }
    #endregion
}
